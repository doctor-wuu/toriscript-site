---
// src/layouts/ArticleLayout.astro
import BaseLayout from './BaseLayout.astro';
const { title, category, tag, slug, categoryLabel, categorySlug, authorLabel, pubDate } = Astro.props;

const middleCrumb = category
  ? {
      "@type": "ListItem",
      "position": 2,
      "name": categoryLabel ?? category,
      "item": `https://toriscript.com/articles/category/${category}/`
    }
  : tag
  ? {
      "@type": "ListItem",
      "position": 2,
      "name": tag,
      "item": `https://toriscript.com/articles/tag/${tag}/`
    }
  : null;

const breadcrumbJson = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "ホーム",
      "item": "https://toriscript.com/"
    },
    ...(middleCrumb ? [middleCrumb] : []),
    {
      "@type": "ListItem",
      "position": middleCrumb ? 3 : 2,
      "name": title,
      "item": `https://toriscript.com/articles/${slug}/`
    }
  ]
};
---


<BaseLayout title={title}>
  <head slot="head">
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbJson)} />
</head>

  <div slot="logo">
    <header class="py-4 flex flex-col items-center">
      <a href={import.meta.env.BASE_URL} class="block">
        <img src={`${import.meta.env.BASE_URL}images/tori-logo2.png`} alt="Tori Script ロゴ" class="h-[69px] mx-auto" />
      </a>
    </header>
  </div>
<!-- パンくずの上に細いボーダー -->
<div slot="breadcrumbBorder">
  <div class="w-full border-t border-gray-200"></div>
</div>
  <!-- パンくずスロット -->
<div slot="breadcrumbs">
  <div class="w-full py-1">
    <div class="max-w-7xl mx-auto flex px-4">
      <aside class="hidden lg:block w-[7rem]"></aside>
      <div class="flex-1">
        <div class="text-sm text-gray-500 flex items-center gap-1">
          <a href={import.meta.env.BASE_URL} class="hover:underline">ホーム</a>
          <span class="mx-1">＞</span>
          {categoryLabel && (
            <>
              <a href={`/category/${categorySlug}`} class="hover:underline">{categoryLabel}</a>
              <span class="mx-1">＞</span>
            </>
          )}
          <span>{title}</span>
        </div>
      </div>
      <aside class="hidden lg:block w-[20rem]"></aside>
    </div>
  </div>
</div>


<!-- タイトルバー -->



<div slot="titleBlock">
  <div class="w-full bg-[#f5f5f5] min-h-[281px] flex items-center"> <!-- ← これ重要 -->
    <div class="max-w-7xl mx-auto flex px-4 w-full">
      <aside class="hidden lg:block w-[7rem]"></aside>

      <div class="flex-1 flex items-center"> <!-- ← これも中央寄せ -->
        <div class="w-full max-w-[52rem]">
          <!-- メタ情報 -->
          <div class="flex justify-between items-start mb-4 text-sm text-gray-500">
            <div class="flex items-center gap-4 flex-wrap">
              {categoryLabel && (
                <span class="bg-[#8C82AA] text-white text-xs font-semibold px-2 py-1 rounded">
                  {categoryLabel}
                </span>
              )}
              {pubDate && (
                <span>{new Date(pubDate).toLocaleDateString("ja-JP")}</span>
              )}
            </div>
            {authorLabel && (
              <span class="text-xs mt-1">Written by {authorLabel}</span>
            )}
          </div>

          <!-- タイトル -->
          <h1 class="text-[2.5rem] leading-[1.2] text-[#A1A1A1] mb-0 break-jp tracking-[0.05em] text-left">
            {title}
          </h1>
        </div>
      </div>

      <aside class="hidden lg:block w-[20rem]"></aside>
    </div>
  </div>
</div>





  <main class="max-w-7xl mx-auto flex px-4 py-8 gap-8">
    <aside class="hidden lg:block w-[6rem]"></aside>

    <div class="flex-1 max-w-[48rem]">
      <slot name="intro" />
      <slot name="toc" />
      <slot />

    <!-- ✅ 中央カラムに配置 -->
    <div class="mt-12">
      <slot name="pager" />
    </div>
  </div>

      
    </div>

    <aside class="hidden lg:block w-[20rem]">
      <slot name="sidebar" />
    </aside>
    

  </main>
  <script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    const targets = document.querySelectorAll(".article-page ol li");
    targets.forEach((el, i) => {
      el.classList.add("fade-in-on-scroll");
      el.style.transitionDelay = `${i * 0.2}s`;
      observer.observe(el);
    });
  });
</script>
</BaseLayout>

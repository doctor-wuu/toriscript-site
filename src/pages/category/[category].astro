---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { categoryMap } from '@/data/categoryMap.ts';


const { category } = Astro.params;

// 🧠 これは HTML を生成する本体処理
const allArticles = await getCollection('articles');
const articles = allArticles.filter(
  (article) => categoryMap[article.data.category]?.slug === category
);
const categoryLabel = categoryMap[
  allArticles.find((a) => categoryMap[a.data.category]?.slug === category)?.data.category
]?.label;

console.log("🟡 category:", category);
console.log("🟢 filtered articles:", articles.map(a => a.slug));

// ✅ これがルーティング処理！ export を忘れずに！！
export async function getStaticPaths() {
  const allArticles = await getCollection('articles');

  console.log("🟠 Articles loaded:", allArticles.map(a => a.slug));

  const slugs = Array.from(
    new Set(
      allArticles
        .map((article) => {
          const id = article.data.category;
          const slug = categoryMap[id]?.slug;
          console.log("🔹 ID:", id, "→ slug:", slug);
          return slug;
        })
        .filter(Boolean)
    )
  );

  console.log("✅ Static paths:", slugs);

  return slugs.map((slug) => ({
    params: { category: slug },
  }));
}



---


<Layout title={`${categoryLabel} の記事一覧`}>
  <div class="max-w-[48rem] mx-auto">
    <h1 class="text-2xl font-bold mb-6 text-center text-[#4a4a4a]">
      {categoryLabel} の記事一覧
    </h1>

    {articles.length > 0 ? (
      <ul class="space-y-6">
        {articles.map((article) => (
          <li class="border-b pb-4">
            <a href={`/articles/${article.slug}`} class="block hover:underline">
              <h2 class="text-xl font-semibold">{article.data.title}</h2>
              {article.data.description && (
                <p class="text-sm text-gray-500">{article.data.description}</p>
              )}
            </a>
          </li>
        ))}
      </ul>
    ) : (
      <p class="text-sm text-gray-400">この記事カテゴリにはまだ投稿がありません。</p>
    )}

  </div>
</Layout>

